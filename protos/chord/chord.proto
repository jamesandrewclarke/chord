syntax = "proto3";

option go_package = "go.jclarke.tech/chord/chord_proto";

package chord_proto;

service Chord {
    rpc GetPredecessor(PredecessorRequest) returns (Node);
    rpc GetSuccessor(SuccessorRequest) returns (Node);
    rpc FindSuccessor(FindSuccessorRequest) returns (FindSuccessorResponse);
    rpc Rectify(Node) returns (RectifyResponse);
    rpc SuccessorList(SuccessorListRequest) returns (SuccessorListResponse);
    rpc Announce(AnnounceRequest) returns (Node);
    rpc Alive(LivenessRequest) returns (LivenessResponse);
}

// Empty placeholders in case we need to add parameters in the future
message PredecessorRequest {}
message SuccessorRequest {}
message SuccessorListRequest {}
message LivenessRequest {}

message HelloRequest {}

message RectifyResponse {}
message LivenessResponse{}

message AnnounceRequest {
    int32 port = 1;

    // Can optionally specify the address to be reached at
    optional string address = 2;
}

message FindSuccessorRequest {
    int64 id = 1;
    // For debugging/experimental purposes, measure the number of hops between lookups
    int32 pathLength = 2;
}

message FindSuccessorResponse {
    Node node = 1;
    int32 pathLength = 2;
}

message SuccessorListResponse {
    repeated Node nodes = 1;
    int32 num_successors = 2;
}

message Node {
    string address = 1;
    int64 identifier = 2;
}
